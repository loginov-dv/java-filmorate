CREATE TABLE IF NOT EXISTS ratings (
	rating_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	name varchar NOT NULL
);

CREATE TABLE IF NOT EXISTS films (
	film_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	name varchar NOT NULL,
	description varchar(200) NOT NULL,
	release_date date,
	duration INTEGER NOT NULL,
	rating_id INTEGER REFERENCES ratings,
	CONSTRAINT positive_duration CHECK (duration > 0),
	CONSTRAINT description_not_blank CHECK (TRIM(description) <> ''),
	CONSTRAINT min_release_date CHECK (release_date >= '1895-12-28')
);

CREATE TABLE IF NOT EXISTS genres (
	genre_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	name varchar NOT NULL
);

CREATE TABLE IF NOT EXISTS film_genres (
	id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	film_id INTEGER REFERENCES films,
	genre_id INTEGER REFERENCES genres
);

CREATE TABLE IF NOT EXISTS users (
	user_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	email varchar NOT NULL UNIQUE,
	login varchar NOT NULL,
	name varchar,
	birthday date,
	CONSTRAINT email_not_blank CHECK (TRIM(email) <> ''),
	CONSTRAINT login_not_blank CHECK (TRIM(login) <> ''),
	CONSTRAINT login_no_whitespace CHECK (login NOT LIKE '% %')
);

CREATE TABLE IF NOT EXISTS film_likes (
	id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	film_id INTEGER REFERENCES films,
	user_id INTEGER REFERENCES users
);

CREATE TABLE IF NOT EXISTS friendships (
	id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	user_id INTEGER REFERENCES users,
	friend_id INTEGER REFERENCES users,
	status bool,
	CONSTRAINT no_self_friendship CHECK (user_id <> friend_id)
);